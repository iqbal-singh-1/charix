/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as CharityContractContractJson } from "../CharityContract.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace CharityContractTypes {
  export type Fields = {
    totalFundsCollected: bigint;
    fundRaised: bigint;
    fundsSpent: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    raiseFund: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<boolean>;
    };
    donateFunds: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<boolean>;
    };
    spendFund: {
      params: CallContractParams<{ toAddress: Address; amount: bigint }>;
      result: CallContractResult<boolean>;
    };
    trackFund: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    displayTotalFundsCollected: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    displayTotalFundsLeft: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    raiseFund: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    donateFunds: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    spendFund: {
      params: SignExecuteContractMethodParams<{
        toAddress: Address;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    trackFund: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    displayTotalFundsCollected: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    displayTotalFundsLeft: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = {
    donationRecords?: Map<Address, bigint>;
    fundsSpentRecords?: Map<Address, bigint>;
  };
}

class Factory extends ContractFactory<
  CharityContractInstance,
  CharityContractTypes.Fields
> {
  encodeFields(fields: CharityContractTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  consts = {
    ErrorCodes: {
      ERROR_INVALID_OWNER: BigInt("1"),
      ERROR_UNSUFFICIENT_FUNDS: BigInt("2"),
    },
  };

  at(address: string): CharityContractInstance {
    return new CharityContractInstance(address);
  }

  tests = {
    raiseFund: async (
      params: TestContractParams<
        CharityContractTypes.Fields,
        { amount: bigint },
        CharityContractTypes.Maps
      >
    ): Promise<TestContractResult<boolean, CharityContractTypes.Maps>> => {
      return testMethod(this, "raiseFund", params, getContractByCodeHash);
    },
    donateFunds: async (
      params: TestContractParams<
        CharityContractTypes.Fields,
        { amount: bigint },
        CharityContractTypes.Maps
      >
    ): Promise<TestContractResult<boolean, CharityContractTypes.Maps>> => {
      return testMethod(this, "donateFunds", params, getContractByCodeHash);
    },
    spendFund: async (
      params: TestContractParams<
        CharityContractTypes.Fields,
        { toAddress: Address; amount: bigint },
        CharityContractTypes.Maps
      >
    ): Promise<TestContractResult<boolean, CharityContractTypes.Maps>> => {
      return testMethod(this, "spendFund", params, getContractByCodeHash);
    },
    trackFund: async (
      params: Omit<
        TestContractParams<
          CharityContractTypes.Fields,
          never,
          CharityContractTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint, CharityContractTypes.Maps>> => {
      return testMethod(this, "trackFund", params, getContractByCodeHash);
    },
    displayTotalFundsCollected: async (
      params: Omit<
        TestContractParams<
          CharityContractTypes.Fields,
          never,
          CharityContractTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint, CharityContractTypes.Maps>> => {
      return testMethod(
        this,
        "displayTotalFundsCollected",
        params,
        getContractByCodeHash
      );
    },
    displayTotalFundsLeft: async (
      params: Omit<
        TestContractParams<
          CharityContractTypes.Fields,
          never,
          CharityContractTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint, CharityContractTypes.Maps>> => {
      return testMethod(
        this,
        "displayTotalFundsLeft",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: CharityContractTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: CharityContractTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const CharityContract = new Factory(
  Contract.fromJson(
    CharityContractContractJson,
    "",
    "f4da80aa5d8bbb85418ae6d74b32bda9cb9c84ee21f28febb2dadc636740a05a",
    []
  )
);
registerContract(CharityContract);

// Use this class to interact with the blockchain
export class CharityContractInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    donationRecords: new RalphMap<Address, bigint>(
      CharityContract.contract,
      this.contractId,
      "donationRecords"
    ),
    fundsSpentRecords: new RalphMap<Address, bigint>(
      CharityContract.contract,
      this.contractId,
      "fundsSpentRecords"
    ),
  };

  async fetchState(): Promise<CharityContractTypes.State> {
    return fetchContractState(CharityContract, this);
  }

  view = {
    raiseFund: async (
      params: CharityContractTypes.CallMethodParams<"raiseFund">
    ): Promise<CharityContractTypes.CallMethodResult<"raiseFund">> => {
      return callMethod(
        CharityContract,
        this,
        "raiseFund",
        params,
        getContractByCodeHash
      );
    },
    donateFunds: async (
      params: CharityContractTypes.CallMethodParams<"donateFunds">
    ): Promise<CharityContractTypes.CallMethodResult<"donateFunds">> => {
      return callMethod(
        CharityContract,
        this,
        "donateFunds",
        params,
        getContractByCodeHash
      );
    },
    spendFund: async (
      params: CharityContractTypes.CallMethodParams<"spendFund">
    ): Promise<CharityContractTypes.CallMethodResult<"spendFund">> => {
      return callMethod(
        CharityContract,
        this,
        "spendFund",
        params,
        getContractByCodeHash
      );
    },
    trackFund: async (
      params?: CharityContractTypes.CallMethodParams<"trackFund">
    ): Promise<CharityContractTypes.CallMethodResult<"trackFund">> => {
      return callMethod(
        CharityContract,
        this,
        "trackFund",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    displayTotalFundsCollected: async (
      params?: CharityContractTypes.CallMethodParams<"displayTotalFundsCollected">
    ): Promise<
      CharityContractTypes.CallMethodResult<"displayTotalFundsCollected">
    > => {
      return callMethod(
        CharityContract,
        this,
        "displayTotalFundsCollected",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    displayTotalFundsLeft: async (
      params?: CharityContractTypes.CallMethodParams<"displayTotalFundsLeft">
    ): Promise<
      CharityContractTypes.CallMethodResult<"displayTotalFundsLeft">
    > => {
      return callMethod(
        CharityContract,
        this,
        "displayTotalFundsLeft",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    raiseFund: async (
      params: CharityContractTypes.SignExecuteMethodParams<"raiseFund">
    ): Promise<CharityContractTypes.SignExecuteMethodResult<"raiseFund">> => {
      return signExecuteMethod(CharityContract, this, "raiseFund", params);
    },
    donateFunds: async (
      params: CharityContractTypes.SignExecuteMethodParams<"donateFunds">
    ): Promise<CharityContractTypes.SignExecuteMethodResult<"donateFunds">> => {
      return signExecuteMethod(CharityContract, this, "donateFunds", params);
    },
    spendFund: async (
      params: CharityContractTypes.SignExecuteMethodParams<"spendFund">
    ): Promise<CharityContractTypes.SignExecuteMethodResult<"spendFund">> => {
      return signExecuteMethod(CharityContract, this, "spendFund", params);
    },
    trackFund: async (
      params: CharityContractTypes.SignExecuteMethodParams<"trackFund">
    ): Promise<CharityContractTypes.SignExecuteMethodResult<"trackFund">> => {
      return signExecuteMethod(CharityContract, this, "trackFund", params);
    },
    displayTotalFundsCollected: async (
      params: CharityContractTypes.SignExecuteMethodParams<"displayTotalFundsCollected">
    ): Promise<
      CharityContractTypes.SignExecuteMethodResult<"displayTotalFundsCollected">
    > => {
      return signExecuteMethod(
        CharityContract,
        this,
        "displayTotalFundsCollected",
        params
      );
    },
    displayTotalFundsLeft: async (
      params: CharityContractTypes.SignExecuteMethodParams<"displayTotalFundsLeft">
    ): Promise<
      CharityContractTypes.SignExecuteMethodResult<"displayTotalFundsLeft">
    > => {
      return signExecuteMethod(
        CharityContract,
        this,
        "displayTotalFundsLeft",
        params
      );
    },
  };

  async multicall<Calls extends CharityContractTypes.MultiCallParams>(
    calls: Calls
  ): Promise<CharityContractTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends CharityContractTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<CharityContractTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | CharityContractTypes.MultiCallParams
      | CharityContractTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      CharityContract,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
