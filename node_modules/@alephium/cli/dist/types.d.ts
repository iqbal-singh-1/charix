import { NodeProvider, Account, DeployContractParams, DeployContractResult, Fields, ContractFactory, ExecutableScript, ExecuteScriptParams, ExecuteScriptResult, CompilerOptions, NetworkId, ContractInstance, DeployContractExecutionResult, RunScriptResult } from '@alephium/web3';
export interface Network<Settings = unknown> {
    networkId?: number;
    nodeUrl: string;
    privateKeys: string[] | string;
    confirmations?: number;
    settings: Settings;
}
export interface Configuration<Settings = unknown> {
    sourceDir?: string;
    artifactDir?: string;
    deployToMultipleGroupsInParallel?: boolean;
    deploymentScriptDir?: string;
    deploymentsDir?: string;
    compilerOptions?: CompilerOptions;
    skipRecompile?: boolean;
    networks: Record<NetworkId, Network<Settings>>;
    enableDebugMode?: boolean;
    forceRecompile?: boolean;
}
export declare const DEFAULT_CONFIGURATION_VALUES: {
    sourceDir: string;
    artifactDir: string;
    compilerOptions: CompilerOptions;
    deployToMultipleGroupsInParallel: boolean;
    deploymentScriptDir: string;
    deploymentsDir: string;
    networkId: "devnet";
    networks: {
        devnet: {
            networkId: number;
            confirmations: number;
            privateKeys: string[];
        };
        testnet: {
            networkId: number;
            confirmations: number;
        };
        mainnet: {
            networkId: number;
            confirmations: number;
        };
    };
    forceRecompile: boolean;
};
export interface Environment<Settings = unknown> {
    config: Configuration<Settings>;
    network: Network<Settings>;
    nodeProvider: NodeProvider;
}
export declare function getEnv<Settings = unknown>(configFileName?: string, networkId?: NetworkId): Environment<Settings>;
export interface Deployer {
    provider: NodeProvider;
    account: Account;
    deployContract<T extends ContractInstance, P extends Fields>(constractFactory: ContractFactory<T, P>, params: DeployContractParams<P>, taskTag?: string): Promise<DeployContractResult<T>>;
    deployContractTemplate<T extends ContractInstance, P extends Fields>(constractFactory: ContractFactory<T, P>, taskTag?: string): Promise<DeployContractResult<T>>;
    runScript<P extends Fields>(executableScript: ExecutableScript<P>, params: ExecuteScriptParams<P>, taskTag?: string): Promise<ExecuteScriptResult>;
    getDeployContractResult(name: string): DeployContractExecutionResult;
    getRunScriptResult(name: string): RunScriptResult;
    getDeployContractResultFromGroup(name: string, group: number): DeployContractExecutionResult;
}
export interface DeployFunction<Settings = unknown> {
    (deployer: Deployer, network: Network<Settings>): Promise<void | boolean>;
    skip?: (config: Configuration<Settings>, networkId: NetworkId) => Promise<boolean>;
    id?: string;
}
