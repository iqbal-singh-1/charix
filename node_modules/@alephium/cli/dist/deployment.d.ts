import { ContractFactory, NetworkId, ContractInstance, DeployContractExecutionResult, RunScriptResult } from '@alephium/web3';
import { PrivateKeyWallet } from '@alephium/web3-wallet';
import { Configuration } from './types';
export declare class Deployments {
    deployments: DeploymentsPerAddress[];
    constructor(deployments: DeploymentsPerAddress[]);
    static empty(): Deployments;
    isEmpty(): boolean;
    deploymentsByGroup(group: number): DeploymentsPerAddress | undefined;
    getDeployedContractResult(group: number, name: string): DeployContractExecutionResult | undefined;
    getExecutedScriptResult(group: number, name: string): RunScriptResult | undefined;
    add(deploymentsPerAddress: DeploymentsPerAddress): void;
    getByDeployer(deployerAddress: string): DeploymentsPerAddress | undefined;
    saveToFile(filepath: string, config: Configuration, deploymentSuccessful: boolean): Promise<void>;
    static from(filepath: string): Promise<Deployments>;
    static load(configuration: Configuration, networkId: NetworkId): Promise<Deployments>;
    private tryGetDeployedContract;
    getInstance<I extends ContractInstance>(contract: ContractFactory<I, any>, group?: number, taskId?: string): I | undefined;
}
export declare function getDeploymentResult(filepath: string): Promise<DeploymentsPerAddress>;
export declare function getDeploymentResults(filepath: string): Promise<DeploymentsPerAddress[]>;
export declare class DeploymentsPerAddress {
    deployerAddress: string;
    contracts: Map<string, DeployContractExecutionResult>;
    scripts: Map<string, RunScriptResult>;
    migrations: Map<string, number>;
    constructor(deployerAddress: string, contracts: Map<string, DeployContractExecutionResult>, scripts: Map<string, RunScriptResult>, migrations: Map<string, number>);
    static empty(deployerAddress: string): DeploymentsPerAddress;
    isEmpty(): boolean;
    marshal(): any;
    static unmarshal(json: any): DeploymentsPerAddress;
}
export declare function recordEqual(left: Record<string, string>, right: Record<string, string>): boolean;
export declare function validatePrivateKeys(privateKeys: string[] | string): PrivateKeyWallet[];
export declare function deploy<Settings = unknown>(configuration: Configuration<Settings>, networkId: NetworkId, deployments: Deployments, fromIndex?: number, toIndex?: number, silent?: boolean): Promise<boolean>;
export declare function deployToDevnet(silent?: boolean): Promise<Deployments>;
