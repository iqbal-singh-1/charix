"use strict";
/*
Copyright 2018 - 2022 The Alephium Authors
This file is part of the alephium project.

The library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

The library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the library. If not, see <http://www.gnu.org/licenses/>.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.taskIdToVariable = exports.waitUserConfirmation = exports.retryFetch = exports.getNetwork = exports.isDeployed = exports.getDeploymentFilePath = exports.isDevnetLive = exports.checkFullNodeVersion = exports.getSdkFullNodeVersion = exports.isNetworkLive = exports.getConfigFile = exports.loadConfig = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const types_1 = require("./types");
const fetchRetry = __importStar(require("fetch-retry"));
const readline = __importStar(require("readline"));
function loadConfig(filename) {
    const configPath = path_1.default.resolve(filename);
    if (!fs_1.default.existsSync(configPath)) {
        throw new Error(`${configPath} does not exist`);
    }
    /* eslint-disable @typescript-eslint/no-var-requires */
    const content = require(path_1.default.resolve(configPath));
    /* eslint-enable @typescript-eslint/no-var-requires */
    if (!content.default) {
        throw new Error(`config file ${filename} have no default export`);
    }
    const configurationInput = content.default;
    return { ...types_1.DEFAULT_CONFIGURATION_VALUES, ...configurationInput };
}
exports.loadConfig = loadConfig;
function getConfigFile() {
    const projectRootPath = path_1.default.resolve(process.cwd());
    const tsConfig = path_1.default.join(projectRootPath, 'alephium.config.ts');
    if (fs_1.default.existsSync(tsConfig)) {
        return tsConfig;
    }
    const jsConfig = path_1.default.join(projectRootPath, 'alephium.config.js');
    if (fs_1.default.existsSync(jsConfig)) {
        return jsConfig;
    }
    throw new Error('No config file `alephium.config.ts` or `alephium.config.js` found');
}
exports.getConfigFile = getConfigFile;
async function isNetworkLive(url) {
    try {
        const res = await fetch(`${url}/infos/version`, { method: 'Get' });
        return res.status === 200;
    }
    catch (e) {
        console.error(`Error when checking if network is live: ${e}`);
        return false;
    }
}
exports.isNetworkLive = isNetworkLive;
function getSdkFullNodeVersion() {
    /* eslint-disable @typescript-eslint/no-var-requires */
    const web3Path = require.resolve('@alephium/web3');
    const packageJsonPath = path_1.default.join(web3Path, '..', '..', '..', 'package.json');
    return require(packageJsonPath).config.alephium_version;
    /* eslint-enable @typescript-eslint/no-var-requires */
}
exports.getSdkFullNodeVersion = getSdkFullNodeVersion;
function checkFullNodeVersion(connectedFullNodeVersion, sdkFullNodeVersion) {
    const connectedVersions = connectedFullNodeVersion.split('.');
    const sdkVersions = sdkFullNodeVersion.split('.');
    const connectedMajorVersion = Number(connectedVersions[0]);
    const sdkMajorVersion = Number(sdkVersions[0]);
    if (connectedMajorVersion > sdkMajorVersion) {
        return;
    }
    const minimumRequiredVersion = `${sdkVersions[0]}.${sdkVersions[1]}.0`;
    if (connectedMajorVersion < sdkMajorVersion) {
        throw new Error(`Connected full node version is ${connectedFullNodeVersion}, the minimum required version is ${minimumRequiredVersion}`);
    }
    const connectedMinorVersion = Number(connectedVersions[1]);
    const sdkMinorVersion = Number(sdkVersions[1]);
    if (connectedMinorVersion > sdkMinorVersion) {
        return;
    }
    if (connectedMinorVersion < sdkMinorVersion) {
        throw new Error(`Connected full node version is ${connectedFullNodeVersion}, the minimum required version is ${minimumRequiredVersion}`);
    }
}
exports.checkFullNodeVersion = checkFullNodeVersion;
async function isDevnetLive() {
    return await isNetworkLive('http://127.0.0.1:22973');
}
exports.isDevnetLive = isDevnetLive;
function getDeploymentFilePath(configuration, networkId) {
    const filename = `.deployments.${networkId}.json`;
    const filepath = path_1.default.join(configuration.deploymentsDir ?? types_1.DEFAULT_CONFIGURATION_VALUES.deploymentsDir, filename);
    const legacyFilepath = path_1.default.join(configuration.artifactDir ?? types_1.DEFAULT_CONFIGURATION_VALUES.artifactDir, filename);
    // if the legacy deployments file exists, we need to update it within the
    // legacy deployments file when the user continues to deploy the contract
    return fs_1.default.existsSync(legacyFilepath) ? legacyFilepath : filepath;
}
exports.getDeploymentFilePath = getDeploymentFilePath;
function isDeployed(configuration) {
    const mainnet = getDeploymentFilePath(configuration, 'mainnet');
    const testnet = getDeploymentFilePath(configuration, 'testnet');
    return fs_1.default.existsSync(mainnet) || fs_1.default.existsSync(testnet);
}
exports.isDeployed = isDeployed;
function getNetwork(configuration, networkId) {
    const networkInput = configuration.networks[`${networkId}`];
    const defaultValues = types_1.DEFAULT_CONFIGURATION_VALUES.networks[`${networkId}`];
    return { ...defaultValues, ...networkInput };
}
exports.getNetwork = getNetwork;
exports.retryFetch = fetchRetry.default(fetch, {
    retries: 20,
    retryDelay: 1000
});
function waitUserConfirmation(msg) {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    return new Promise((resolve) => {
        rl.question(`${msg} (y) `, (answer) => {
            rl.close();
            resolve(answer.toLowerCase() === 'y');
        });
    });
}
exports.waitUserConfirmation = waitUserConfirmation;
function taskIdToVariable(taskId) {
    return taskId.replace(/[:\-]/g, '_');
}
exports.taskIdToVariable = taskIdToVariable;
