import { Account, KeyType, ExplorerProvider, NodeProvider, SignerProviderSimple } from '@alephium/web3';
export declare class PrivateKeyWallet extends SignerProviderSimple {
    readonly keyType: KeyType;
    readonly privateKey: string;
    readonly publicKey: string;
    readonly address: string;
    readonly group: number;
    readonly _nodeProvider: NodeProvider | undefined;
    readonly _explorerProvider: ExplorerProvider | undefined;
    get nodeProvider(): NodeProvider;
    get explorerProvider(): ExplorerProvider | undefined;
    protected unsafeGetSelectedAccount(): Promise<Account>;
    protected getPublicKey(address: string): Promise<string>;
    get account(): Account;
    constructor({ privateKey, keyType, nodeProvider, explorerProvider }: {
        privateKey: string;
        keyType?: KeyType;
        nodeProvider?: NodeProvider;
        explorerProvider?: ExplorerProvider;
    });
    static Random(targetGroup?: number, nodeProvider?: NodeProvider, keyType?: KeyType): PrivateKeyWallet;
    static FromMnemonic({ mnemonic, keyType, addressIndex, passphrase, nodeProvider }: {
        mnemonic: string;
        keyType?: KeyType;
        addressIndex?: number;
        passphrase?: string;
        nodeProvider?: NodeProvider;
    }): PrivateKeyWallet;
    static FromMnemonicWithGroup(mnemonic: string, targetGroup: number, keyType?: KeyType, fromAddressIndex?: number, passphrase?: string, nodeProvider?: NodeProvider): PrivateKeyWallet;
    signRaw(signerAddress: string, hexString: string): Promise<string>;
    static sign(privateKey: string, hexString: string, _keyType?: KeyType): string;
}
